/**
 * MJOS Main Entry Point
 * 魔剑工作室操作系统主入口
 */

// 导出核心类型
export * from './types/index';

// 简单的MJOS类
export class MJOS {
  private version = '1.0.0';

  constructor() {
    console.log('MJOS initialized successfully!');
  }

  getVersion(): string {
    return this.version;
  }

  start(): void {
    console.log('MJOS started!');
  }

  stop(): void {
    console.log('MJOS stopped!');
  }
}

// 默认导出
export default MJOS;

/**
 * MJOS系统�? * 整合所有组件，提供统一的系统接�? */
export class MJOS {
  private readonly logger: Logger;
  private readonly eventBus: EventBus;
  private readonly config: MJOSConfig;

  private mjosEngine?: MJOSEngine;
  private contextManager?: ContextManager;
  private collaborationEngine?: MultiAgentCollaborationEngine;
  private systemMonitor?: SystemMonitor;
  private enhancedMemorySystem?: EnhancedEngramMemorySystem;
  private dualModeReasoningEngine?: DualModeReasoningEngine;
  private errorRecoverySystem?: ErrorRecoverySystem;
  private performanceOptimizer?: PerformanceOptimizer;
  private securityManager?: SecurityManager;
  private mpmlEngine?: any;
  private mhpfRuntime?: any;
  private mpeoas?: any;
  private mmpt?: any;
  private mcpIntegration?: any;

  private isInitialized = false;
  private isRunning = false;

  constructor(config: Partial<MJOSConfig> = {}) {
    this.config = {
      logLevel: 'info',
      enableMPML: true,
      enableMHPF: true,
      enableMPEOAS: true,
      enableMMPT: true,
      enableMCP: true,
      ...config
    };

    // 创建日志�?    this.logger = createLogger({
      level: this.config.logLevel,
      format: format.combine(
        format.timestamp(),
        format.errors({ stack: true }),
        format.json()
      ),
      transports: [
        new transports.Console({
          format: format.combine(
            format.colorize(),
            format.simple()
          )
        }),
        new transports.File({
          filename: 'logs/mjos.log',
          maxsize: 10485760, // 10MB
          maxFiles: 5
        })
      ]
    });

    // 创建事件总线
    this.eventBus = new EventBus(this.logger);

    this.logger.info('MJOS System created', { config: this.config });
  }

  /**
   * 初始化系�?   */
  public async initialize(): Promise<void> {
    if (this.isInitialized) {
      this.logger.debug('MJOS System already initialized');
      return;
    }

    try {
      this.logger.info('Initializing MJOS System');

      // 初始化核心引�?      this.mjosEngine = new MJOSEngine(this.logger, this.eventBus);
      await this.mjosEngine.initialize();

      // 初始化上下文管理�?      this.contextManager = new ContextManager(this.logger, this.eventBus);

      // 开始初始化工作阶段
      await this.contextManager.startWorkPhase(
        'initialization',
        'MJOS System Initialization',
        []
      );

      // 初始化协作引�?      this.collaborationEngine = new MultiAgentCollaborationEngine(
        this.logger,
        this.eventBus,
        this.contextManager,
        this.mpmlEngine?.getMemorySystem(),
        this.mpmlEngine?.getReasoningSystem()
      );

      // 初始化系统监�?      this.systemMonitor = new SystemMonitor(this.logger, this.eventBus);
      this.systemMonitor.startMonitoring();

      // 初始化增强记忆系�?      this.enhancedMemorySystem = new EnhancedEngramMemorySystem(this.logger, this.eventBus);

      // 初始化双模式推理引擎
      this.dualModeReasoningEngine = new DualModeReasoningEngine(this.logger, this.eventBus);

      // 初始化错误恢复系�?      this.errorRecoverySystem = new ErrorRecoverySystem(this.logger, this.eventBus);

      // 初始化性能优化�?      this.performanceOptimizer = new PerformanceOptimizer(this.logger, this.eventBus);

      // 初始化安全管理器
      this.securityManager = new SecurityManager(this.logger, this.eventBus);

      // 初始化MPML引擎
      if (this.config.enableMPML) {
        this.mpmlEngine = createMPMLEngine(this.logger, this.eventBus, {
          persistenceConfig: this.config.persistenceConfig
        });
        await this.mpmlEngine.initialize();
      }

      // 初始化MHPF运行�?      if (this.config.enableMHPF) {
        this.mhpfRuntime = createMHPFRuntime(this.logger, this.eventBus);
        await this.mhpfRuntime.initialize(this.config.teamConfig);
      }

      // 初始化MPEOAS引擎
      if (this.config.enableMPEOAS) {
        this.mpeoas = createMPEOASEngine(this.logger, this.eventBus);
        await this.mpeoas.initialize(this.config.teamConfig);
      }

      // 初始化MMPT工具�?      if (this.config.enableMMPT) {
        this.mmpt = createMMPTToolkit(this.logger, this.eventBus);
        await this.mmpt.initialize(this.config.teamConfig);
      }

      // 初始化MCP集成
      if (this.config.enableMCP) {
        this.mcpIntegration = createMCPIntegration(this.logger, this.eventBus, this.config.mcpOptions);
        await this.mcpIntegration.initialize();
      }

      this.isInitialized = true;

      this.logger.info('MJOS System initialized successfully');

      // 发布系统初始化完成事�?      this.eventBus.publishEvent('mjos.system_initialized', {
        config: this.config,
        components: this.getEnabledComponents()
      }, 'MJOS');

    } catch (error) {
      this.logger.error('MJOS System initialization failed', {
        error: error instanceof Error ? error.message : String(error)
      });
      throw error;
    }
  }

  /**
   * 启动系统
   */
  public async start(context?: StateContext): Promise<void> {
    if (!this.isInitialized) {
      throw new Error('MJOS System must be initialized before starting');
    }

    if (this.isRunning) {
      this.logger.debug('MJOS System already running');
      return;
    }

    try {
      this.logger.info('Starting MJOS System');

      const systemContext: StateContext = context || {
        sessionId: `mjos-${Date.now()}`,
        teamId: 'magic-sword-studio',
        currentState: 'starting',
        timestamp: new Date(),
        metadata: { autoStart: true }
      };

      // 启动核心引擎
      if (this.mjosEngine) {
        await this.mjosEngine.start(systemContext);
      }

      // 启动MPEOAS引擎
      if (this.mpeoas) {
        await this.mpeoas.start(systemContext);
      }

      // 激活默认团队配�?      if (this.config.teamConfig && this.mhpfRuntime) {
        await this.mhpfRuntime.activateTeam(this.config.teamConfig, systemContext);
      }

      this.isRunning = true;

      this.logger.info('MJOS System started successfully');

      // 发布系统启动完成事件
      this.eventBus.publishEvent('mjos.system_started', {
        context: systemContext,
        components: this.getEnabledComponents()
      }, 'MJOS');

    } catch (error) {
      this.logger.error('MJOS System start failed', {
        error: error instanceof Error ? error.message : String(error)
      });
      throw error;
    }
  }

  /**
   * 停止系统
   */
  public async stop(): Promise<void> {
    if (!this.isRunning) {
      this.logger.debug('MJOS System not running');
      return;
    }

    try {
      this.logger.info('Stopping MJOS System');

      // 停止MPEOAS引擎
      if (this.mpeoas) {
        await this.mpeoas.stop();
      }

      // 停止核心引擎
      if (this.mjosEngine) {
        await this.mjosEngine.stop();
      }

      this.isRunning = false;

      this.logger.info('MJOS System stopped successfully');

      // 发布系统停止完成事件
      this.eventBus.publishEvent('mjos.system_stopped', {
        timestamp: new Date()
      }, 'MJOS');

    } catch (error) {
      this.logger.error('MJOS System stop failed', {
        error: error instanceof Error ? error.message : String(error)
      });
      throw error;
    }
  }

  /**
   * 获取系统状�?   */
  public getSystemStatus(): {
    initialized: boolean;
    running: boolean;
    components: string[];
    mjosEngine?: any;
    mpmlEngine?: any;
    mhpfRuntime?: any;
    mpeoas?: any;
    mmpt?: any;
    mcpIntegration?: any;
  } {
    const status = {
      initialized: this.isInitialized,
      running: this.isRunning,
      components: this.getEnabledComponents()
    };

    if (this.mjosEngine) {
      (status as any).mjosEngine = this.mjosEngine.getStatus();
    }

    if (this.mpmlEngine) {
      (status as any).mpmlEngine = this.mpmlEngine.getStatus();
    }

    if (this.mhpfRuntime) {
      (status as any).mhpfRuntime = this.mhpfRuntime.getStatus();
    }

    if (this.mpeoas) {
      (status as any).mpeoas = this.mpeoas.getStatus();
    }

    if (this.mmpt) {
      (status as any).mmpt = this.mmpt.getStatus();
    }

    if (this.mcpIntegration) {
      (status as any).mcpIntegration = this.mcpIntegration.getStatus();
    }

    return status;
  }

  /**
   * 获取已启用的组件
   */
  private getEnabledComponents(): string[] {
    const components: string[] = [];

    if (this.mjosEngine) components.push('MJOSEngine');
    if (this.contextManager) components.push('ContextManager');
    if (this.collaborationEngine) components.push('CollaborationEngine');
    if (this.systemMonitor) components.push('SystemMonitor');
    if (this.enhancedMemorySystem) components.push('EnhancedMemorySystem');
    if (this.dualModeReasoningEngine) components.push('DualModeReasoningEngine');
    if (this.errorRecoverySystem) components.push('ErrorRecoverySystem');
    if (this.performanceOptimizer) components.push('PerformanceOptimizer');
    if (this.securityManager) components.push('SecurityManager');
    if (this.mpmlEngine) components.push('MPMLEngine');
    if (this.mhpfRuntime) components.push('MHPFRuntime');
    if (this.mpeoas) components.push('MPEOASEngine');
    if (this.mmpt) components.push('MMPTToolkit');
    if (this.mcpIntegration) components.push('MCPIntegration');

    return components;
  }

  /**
   * 获取上下文管理器
   */
  public getContextManager(): ContextManager | undefined {
    return this.contextManager;
  }

  /**
   * 开始新的工作阶�?   */
  public async startWorkPhase(
    phase: 'analysis' | 'design' | 'implementation' | 'testing' | 'optimization' | 'deployment',
    taskDescription: string
  ): Promise<string | null> {
    if (!this.contextManager) {
      throw new Error('Context Manager not enabled');
    }

    return await this.contextManager.startWorkPhase(phase, taskDescription);
  }

  /**
   * 更新当前上下�?   */
  public async updateContext(updates: any): Promise<void> {
    if (!this.contextManager) {
      throw new Error('Context Manager not enabled');
    }

    return await this.contextManager.updateContext(updates);
  }

  /**
   * 完成工作阶段
   */
  public async completeWorkPhase(
    achievements: any[],
    nextPhase?: 'analysis' | 'design' | 'implementation' | 'testing' | 'optimization' | 'deployment'
  ): Promise<void> {
    if (!this.contextManager) {
      throw new Error('Context Manager not enabled');
    }

    return await this.contextManager.completeWorkPhase(achievements, nextPhase);
  }

  /**
   * 获取协作引擎
   */
  public getCollaborationEngine(): MultiAgentCollaborationEngine | undefined {
    return this.collaborationEngine;
  }

  /**
   * 启动协作项目
   */
  public async startCollaborationProject(
    projectName: string,
    description: string,
    objectives: string[],
    timeline: { startDate: Date; endDate: Date }
  ): Promise<string | null> {
    if (!this.collaborationEngine) {
      throw new Error('Collaboration Engine not enabled');
    }

    return await this.collaborationEngine.startCollaborationProject(
      projectName,
      description,
      objectives,
      timeline
    );
  }

  /**
   * 获取协作统计
   */
  public getCollaborationStatistics(): any {
    if (!this.collaborationEngine) {
      throw new Error('Collaboration Engine not enabled');
    }

    return this.collaborationEngine.getCollaborationStatistics();
  }

  /**
   * 获取系统监控�?   */
  public getSystemMonitor(): SystemMonitor | undefined {
    return this.systemMonitor;
  }

  /**
   * 获取系统状�?   */
  public getSystemStatus(): any {
    if (!this.systemMonitor) {
      throw new Error('System Monitor not enabled');
    }

    return this.systemMonitor.getSystemStatus();
  }

  /**
   * 获取系统指标
   */
  public getSystemMetrics(limit?: number): any[] {
    if (!this.systemMonitor) {
      throw new Error('System Monitor not enabled');
    }

    return this.systemMonitor.getMetricsHistory(limit);
  }

  /**
   * 获取健康检查结�?   */
  public getHealthChecks(): any[] {
    if (!this.systemMonitor) {
      throw new Error('System Monitor not enabled');
    }

    return this.systemMonitor.getHealthChecks();
  }

  /**
   * 获取活跃告警
   */
  public getActiveAlerts(): any[] {
    if (!this.systemMonitor) {
      throw new Error('System Monitor not enabled');
    }

    return this.systemMonitor.getActiveAlerts();
  }

  /**
   * 获取增强记忆系统
   */
  public getEnhancedMemorySystem(): EnhancedEngramMemorySystem | undefined {
    return this.enhancedMemorySystem;
  }

  /**
   * 存储增强记忆
   */
  public async storeEnhancedMemory(
    content: any,
    metadata: any,
    neuralPattern?: any
  ): Promise<string | null> {
    if (!this.enhancedMemorySystem) {
      throw new Error('Enhanced Memory System not enabled');
    }

    return await this.enhancedMemorySystem.storeEnhancedEngram(content, metadata, neuralPattern);
  }

  /**
   * 获取记忆统计
   */
  public getEnhancedMemoryStatistics(): any {
    if (!this.enhancedMemorySystem) {
      throw new Error('Enhanced Memory System not enabled');
    }

    return this.enhancedMemorySystem.getMemoryStatistics();
  }

  /**
   * 获取双模式推理引�?   */
  public getDualModeReasoningEngine(): DualModeReasoningEngine | undefined {
    return this.dualModeReasoningEngine;
  }

  /**
   * 智能推理
   */
  public async performIntelligentReasoning(
    problem: string,
    context: any,
    sessionId?: string
  ): Promise<any> {
    if (!this.dualModeReasoningEngine) {
      throw new Error('Dual Mode Reasoning Engine not enabled');
    }

    return await this.dualModeReasoningEngine.intelligentReasoning(problem, context, sessionId);
  }

  /**
   * 获取推理统计
   */
  public getReasoningStatistics(): any {
    if (!this.dualModeReasoningEngine) {
      throw new Error('Dual Mode Reasoning Engine not enabled');
    }

    return this.dualModeReasoningEngine.getReasoningStatistics();
  }

  /**
   * 获取错误恢复系统
   */
  public getErrorRecoverySystem(): ErrorRecoverySystem | undefined {
    return this.errorRecoverySystem;
  }

  /**
   * 处理错误
   */
  public async handleError(component: string, error: Error, context: Record<string, any> = {}): Promise<boolean> {
    if (!this.errorRecoverySystem) {
      throw new Error('Error Recovery System not enabled');
    }

    return await this.errorRecoverySystem.handleError(component, error, context);
  }

  /**
   * 获取系统健康状�?   */
  public getSystemHealthStatus(): any {
    if (!this.errorRecoverySystem) {
      throw new Error('Error Recovery System not enabled');
    }

    return this.errorRecoverySystem.getSystemHealth();
  }

  /**
   * 获取性能优化�?   */
  public getPerformanceOptimizer(): PerformanceOptimizer | undefined {
    return this.performanceOptimizer;
  }

  /**
   * 获取性能报告
   */
  public getPerformanceReport(): any {
    if (!this.performanceOptimizer) {
      throw new Error('Performance Optimizer not enabled');
    }

    return this.performanceOptimizer.getPerformanceReport();
  }

  /**
   * 获取安全管理�?   */
  public getSecurityManager(): SecurityManager | undefined {
    return this.securityManager;
  }

  /**
   * 用户认证
   */
  public async authenticateUser(
    username: string,
    password: string,
    ipAddress: string,
    userAgent: string
  ): Promise<any> {
    if (!this.securityManager) {
      throw new Error('Security Manager not enabled');
    }

    return await this.securityManager.authenticateUser(username, password, ipAddress, userAgent);
  }

  /**
   * 获取安全报告
   */
  public getSecurityReport(): any {
    if (!this.securityManager) {
      throw new Error('Security Manager not enabled');
    }

    return this.securityManager.getSecurityReport();
  }

  /**
   * 清理资源
   */
  public async destroy(): Promise<void> {
    try {
      this.logger.info('Destroying MJOS System');

      if (this.isRunning) {
        await this.stop();
      }

      // 清理各个组件
      if (this.mcpIntegration) {
        this.mcpIntegration.destroy();
      }

      if (this.mmpt) {
        this.mmpt.destroy();
      }

      if (this.mpmlEngine) {
        await this.mpmlEngine.destroy();
      }

      if (this.securityManager) {
        this.securityManager.destroy();
      }

      if (this.performanceOptimizer) {
        await this.performanceOptimizer.destroy();
      }

      if (this.errorRecoverySystem) {
        this.errorRecoverySystem.destroy();
      }

      if (this.dualModeReasoningEngine) {
        this.dualModeReasoningEngine.destroy();
      }

      if (this.enhancedMemorySystem) {
        this.enhancedMemorySystem.destroy();
      }

      if (this.systemMonitor) {
        this.systemMonitor.destroy();
      }

      if (this.collaborationEngine) {
        this.collaborationEngine.destroy();
      }

      if (this.contextManager) {
        this.contextManager.destroy();
      }

      if (this.mjosEngine) {
        await this.mjosEngine.destroy();
      }

      this.logger.info('MJOS System destroyed successfully');

    } catch (error) {
      this.logger.error('MJOS System destruction failed', {
        error: error instanceof Error ? error.message : String(error)
      });
      throw error;
    }
  }
}

/**
 * 创建MJOS实例的便捷函�? */
export function createMJOS(config?: Partial<MJOSConfig>): MJOS {
  return new MJOS(config);
}

// 导出协作模块
export * from './collaboration/index';

// 导出监控模块
export * from './monitoring/index';

// 导出高级记忆模块
export * from './advanced-memory/index';

// 导出高级推理模块
export * from './advanced-reasoning/index';

// 导出容错模块
export * from './fault-tolerance/index';

// 导出性能模块
export * from './performance/index';

// 导出安全模块
export * from './security/index';

/**
 * 默认导出
 */
export default MJOS;

// 如果直接运行此文件，启动MJOS演示
if (require.main === module) {
  async function demo() {
    console.log('🗡�? Starting MJOS Demo...\n');

    try {
      // 创建MJOS实例
      const mjos = createMJOS({
        logLevel: 'debug',
        enableMPML: true,
        enableMHPF: true,
        enableMPEOAS: true,
        enableMMPT: true,
        enableMCP: true
      });

      // 初始�?      console.log('📦 Initializing MJOS...');
      await mjos.initialize();
      console.log('�?MJOS initialized successfully');

      // 启动
      console.log('\n🚀 Starting MJOS...');
      await mjos.start();
      console.log('�?MJOS started successfully');

      // 显示状�?      console.log('\n📊 MJOS Status:');
      const status = mjos.getSystemStatus();
      console.log(JSON.stringify(status, null, 2));

      // 等待一段时间后停止
      console.log('\n�?Running for 5 seconds...');
      await new Promise(resolve => setTimeout(resolve, 5000));

      // 停止
      console.log('\n🛑 Stopping MJOS...');
      await mjos.stop();
      console.log('�?MJOS stopped successfully');

      console.log('\n🎉 MJOS Demo completed!');

    } catch (error) {
      console.error('💥 Demo failed:', error);
      process.exit(1);
    }
  }

  demo().catch(console.error);
}
