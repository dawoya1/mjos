/**
 * MJOS Main Entry Point - Enhanced Version
 * 魔剑工作室操作系统主入口 - 增强版本
 */

import { MJOSEngine, EventBus, Logger, ContextManager } from './core/index';
import { MemorySystem } from './memory/index';
import { TeamManager } from './team/index';

// 导出核心类型和模块
export * from './types/index';
export * from './core/index';
export * from './memory/index';
export * from './team/index';

// 主MJOS类
export class MJOS {
  private version = '1.0.0';
  private engine: MJOSEngine;
  private logger: Logger;
  private contextManager: ContextManager;
  private memorySystem: MemorySystem;
  private teamManager: TeamManager;
  
  constructor() {
    this.logger = new Logger('MJOS');
    this.engine = new MJOSEngine();
    this.contextManager = new ContextManager();
    this.memorySystem = new MemorySystem();
    this.teamManager = new TeamManager(this.engine.getEventBus());
    
    this.logger.info('Enhanced MJOS initialized successfully!');
  }
  
  getVersion(): string {
    return this.version;
  }
  
  async start(): Promise<void> {
    this.logger.info('Starting Enhanced MJOS...');
    await this.engine.start();
    
    // Store startup event in memory
    this.memorySystem.store(
      { event: 'system_start', timestamp: new Date() },
      ['system', 'startup'],
      0.8
    );
    
    this.logger.info('Enhanced MJOS started successfully!');
  }
  
  async stop(): Promise<void> {
    this.logger.info('Stopping Enhanced MJOS...');
    
    // Store shutdown event in memory
    this.memorySystem.store(
      { event: 'system_stop', timestamp: new Date() },
      ['system', 'shutdown'],
      0.8
    );
    
    await this.engine.stop();
    this.logger.info('Enhanced MJOS stopped successfully!');
  }
  
  getStatus(): { 
    version: string; 
    engine: { running: boolean };
    memory: { totalMemories: number; totalTags: number; averageImportance: number };
    team: { totalMembers: number; activeMembers: number; totalTasks: number; completedTasks: number; activeSessions: number };
  } {
    return {
      version: this.version,
      engine: this.engine.getStatus(),
      memory: this.memorySystem.getStats(),
      team: this.teamManager.getTeamStats()
    };
  }
  
  // Core system access
  getEngine(): MJOSEngine {
    return this.engine;
  }
  
  getContextManager(): ContextManager {
    return this.contextManager;
  }
  
  getMemorySystem(): MemorySystem {
    return this.memorySystem;
  }
  
  getTeamManager(): TeamManager {
    return this.teamManager;
  }
  
  // Convenience methods
  remember(content: any, tags: string[] = [], importance: number = 0.5): string {
    return this.memorySystem.store(content, tags, importance);
  }
  
  recall(query: any): any[] {
    return this.memorySystem.query(query);
  }
  
  createTask(title: string, description: string, priority: 'low' | 'medium' | 'high' | 'urgent' = 'medium'): string {
    return this.teamManager.createTask({
      title,
      description,
      status: 'pending',
      priority
    });
  }
  
  assignTask(taskId: string, memberId: string): boolean {
    return this.teamManager.assignTask(taskId, memberId);
  }
}

// 默认导出
export default MJOS;
